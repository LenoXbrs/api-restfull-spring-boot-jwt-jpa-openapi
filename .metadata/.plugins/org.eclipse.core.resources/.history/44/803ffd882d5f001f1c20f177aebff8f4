package com.packt.cardatabase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.packt.cardatabase.domain.Car;
import com.packt.cardatabase.domain.CarRepository;
import com.packt.cardatabase.domain.OwnerRepository;
//CommandLineRunner: interface que permite executarmos codigo antes da aplicação subir 
//@SpringBootApplication conjunto de tres anotações responsaveis por scanear classes e mais.
@SpringBootApplication
public class CardatabaseApplication implements CommandLineRunner {
	
	private static final Logger logger = LoggerFactory.getLogger(
	        CardatabaseApplication.class);

	private final CarRepository carRepository;
	private final OwnerRepository ownerRepository;
	
    public CardatabaseApplication(CarRepository repository,
    		OwnerRepository ownerRepository) {
        this.carRepository = repository;
        this.ownerRepository = ownerRepository;
    }

	public static void main(String[] args) {
		SpringApplication.run(CardatabaseApplication.class, args);
		logger.info("Aplication started");
	}
	


	@Override
	public void run(String... args) throws Exception {
		carRepository.save(new Car("Ford", "Mustang", "Red",
                "ADF-1121", 2023, 59000));
		carRepository.save(new Car("Nissan", "Leaf", "White",
                "SSJ-3002", 2020, 29000));
		carRepository.save(new Car("Toyota", "Prius",
                "Silver", "KKO-0212", 2022, 39000));
      // Fetch all cars and log to console
      for (Car car : repository.findAll()) {
          logger.info("brand: {}, model: {}",
              car.getBrand(), car.getModel());
      }



	}

}
